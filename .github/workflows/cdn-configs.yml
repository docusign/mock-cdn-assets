name: Upload Config Files and Purge Akamai Cache

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    #paths:
    #  - common-configs/**
  pull_request:
    branches:
      - main  # Trigger on PRs targeting the main branch

jobs:
  upload-and-purge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Akamai CLI and NetStorage Module
        run: |
          set -e
          curl -sL https://github.com/akamai/cli/releases/download/v2.0.0/akamai-v2.0.0-linuxamd64 -o akamai
          chmod +x akamai
          sudo mv akamai /usr/local/bin/
          akamai install netstorage
          akamai install purge
          
          echo "[ccu]
          client_secret = ${{ secrets.AKAMAI_API_CLIENT_SECRET }}
          host = ${{ secrets.AKAMAI_API_CLIENT_HOST }}
          access_token = ${{ secrets.AKAMAI_API_CLIENT_ACCESS_TOKEN }}
          client_token = ${{ secrets.AKAMAI_API_CLIENT_CLIENT_TOKEN }}" > ~/.edgerc

          echo "[default]
          key = ${{ secrets.AKAMAI_NS_UPLOAD_ACCOUNT_KEY }}
          id = 1fe
          group = 1FE
          host = 1fe-nsu.akamaihd.net
          cpcode = 1800003" > ~/auth

      - name: Install rsync
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y rsync
          rsync --version || { echo "rsync installation failed"; exit 1; }

      - name: Sync directories and clean up development/demo from NetStorage
        run: |
          set -e # Exit immediately if a command exits with a non-zero status

          # Ensure SSH key is available (as in your original script)
          echo "${{ secrets.AKAMAI_NS_SSH_PRIVATE_KEY }}" > $HOME/key.pem
          chmod 600 $HOME/key.pem

          # Define folders for cleanup (these will be emptied on remote)
          cleanup_folders_on_remote="development demo"

          # Create empty local versions of these directories on the GitHub Runner
          echo "Creating temporary empty local directories for cleanup: $cleanup_folders_on_remote"
          for folder_to_cleanup in $cleanup_folders_on_remote; do
            mkdir "$folder_to_cleanup"
            echo "Created empty local directory: $folder_to_cleanup"
          done

          # Define all folders to be processed by rsync:
          # - Your standard sync folders (integration, production)
          # - The folders marked for cleanup (development, demo)
          # For cleanup folders, rsync will use the empty local versions created above.
          all_folders_to_process="integration production $cleanup_folders_on_remote"
          
          echo "Starting rsync process for folders: $all_folders_to_process"
          for folder in $all_folders_to_process; do
            echo "-----------------------------------------------------"
            echo "Processing folder: $folder"
            
            is_cleanup_target=false
            for cf_item in $cleanup_folders_on_remote; do
              if [ "$folder" == "$cf_item" ]; then
                is_cleanup_target=true
                break
              fi
            done

            if [ "$is_cleanup_target" = true ]; then
              echo "--> ACTION: This is '$folder'. Its contents on remote will be deleted to match the empty local source."
            else
              echo "--> ACTION: This is '$folder'. It will be synced from local source to remote."
            fi
            
            rsync -avv --delete \
              -e "ssh -o StrictHostKeyChecking=no -i $HOME/key.pem" \
              "$folder/" \
              "sshacs@1fe.rsync.upload.akamai.com:$folder/"
            echo "Finished rsync for folder: $folder"
          done
          echo "-----------------------------------------------------"

          echo "Attempting to remove the emptied remote directories: $cleanup_folders_on_remote"
          for folder_to_cleanup in $cleanup_folders_on_remote; do
            echo "Attempting rmdir for remote '$folder_to_cleanup' directory..."
            ssh -o StrictHostKeyChecking=no -i $HOME/key.pem \
              sshacs@1fe.rsync.upload.akamai.com \
              "rmdir $folder_to_cleanup" \
              && echo "--> SUCCESS: Successfully removed remote directory '$folder_to_cleanup'." \
              || echo "--> INFO: Could not remove remote directory '$folder_to_cleanup'. It might not have existed, not been empty, or an issue occurred (this may be okay if rsync already handled it or it was previously removed)."
          done
          echo "-----------------------------------------------------"

      - name: Purge all assets with cache tag
        run: |
          set -e
          echo "Purging all assets with cache tag using akamai CLI..."
          akamai purge invalidate --tag 1fe
