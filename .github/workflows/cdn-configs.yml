# The goal of this GitHub Actions workflow is:
# 1. To sync specific folders (FOLDERS_TO_SYNC) to Akamai NetStorage 1FE and purge the Akamai cache for pushes to the main branch.
# 2. To provide a dry-run preview for Pull Requests.
name: Sync Folders to 1FE Netstorage and Purge Akamai Cache

on:
  push:
    branches:
      - main
    paths:
      # IMPORTANT: If FOLDERS_TO_SYNC (defined in jobs) changes, update these paths to match!
      - 'integration/**'
      - 'production/**'
  pull_request:
    branches:
      - main

# Ensures only the latest workflow run for a specific branch or PR proceeds, canceling older runs.
# This prevents conflicting deployments to 'main' and keeps PR checks efficient for the newest code.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # This job handles the actual deployment and purge for pushes to 'main'
  upload-and-purge:
    if: github.event_name == 'push'
    name: Upload to NetStorage and Purge Cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Akamai CLI, Akamai Purge, Rsync, and Prepare Credentials
        run: |
          set -e

          # Akamai CLI and Purge Module
          echo "Installing Akamai CLI and Purge module..."
          curl -sL https://github.com/akamai/cli/releases/download/v2.0.0/akamai-v2.0.0-linuxamd64 -o akamai
          chmod +x akamai
          sudo mv akamai /usr/local/bin/
          akamai install purge 

          # Akamai API Credentials for Purge (needed for .edgerc)
          echo "Creating .edgerc for Akamai API access..."
          echo "[ccu]
          client_secret = ${{ secrets.AKAMAI_API_CLIENT_SECRET }}
          host = ${{ secrets.AKAMAI_API_CLIENT_HOST }}
          access_token = ${{ secrets.AKAMAI_API_CLIENT_ACCESS_TOKEN }}
          client_token = ${{ secrets.AKAMAI_API_CLIENT_CLIENT_TOKEN }}" > ~/.edgerc

          # Install rsync
          echo "Installing rsync..."
          sudo apt-get update -q
          sudo apt-get install -y -q rsync
          rsync --version 

          # Prepare SSH key for rsync
          echo "Setting up SSH key for rsync..."
          echo "${{ secrets.AKAMAI_NS_SSH_PRIVATE_KEY }}" > $HOME/key.pem
          chmod 600 $HOME/key.pem
          echo "Tool setup and credential preparation complete."

      - name: Sync Specified Folders to NetStorage
        env:
          # IMPORTANT: Define which environments to process
          ENVIRONMENTS_TO_SYNC: 'integration production'
        run: |
          echo "Starting selective folder sync to Akamai NetStorage..."
          echo "Current working directory: $(pwd)"
          echo "Directory listing:"
          ls -la

          for env_name in $ENVIRONMENTS_TO_SYNC; do
            echo "Processing environment: $env_name"
            
            if [ ! -d "$env_name" ]; then
              echo "WARNING: Environment directory '$env_name' not found. Skipping."
              continue 
            fi

            echo "  Contents of '$env_name/':"
            ls -la "$env_name/"
            
            # Automatically discover all subdirectories in this environment
            subdirs=$(find "$env_name" -maxdepth 1 -type d -not -path "$env_name" -printf '%f\n' 2>/dev/null | sort)
            
            if [ -z "$subdirs" ]; then
              echo "  No subdirectories found in '$env_name/'. Skipping."
              continue
            fi
            
            echo "  Found subdirectories in '$env_name/': $(echo $subdirs | tr '\n' ' ')"
            
            # Process each discovered subdirectory
            for subdir in $subdirs; do
              local_path="$env_name/$subdir"
              remote_path="$env_name/$subdir"

              echo "  Checking '$local_path/'..."
              if [ ! -d "$local_path" ]; then
                echo "    ERROR: Local directory '$local_path' does not exist!"
                continue
              fi
              
              echo "    Contents of '$local_path/':"
              ls -la "$local_path/"
              
              file_count=$(find "$local_path" -type f | wc -l)
              echo "    Found $file_count files in '$local_path/'"
              
              if [ "$file_count" -eq 0 ]; then
                echo "    WARNING: No files found in '$local_path/'. Skipping sync."
                continue
              fi

              echo "  Syncing '$local_path/' to '$remote_path/'..."
              
              # Create remote directory structure if it doesn't exist
              ssh -o StrictHostKeyChecking=no -i $HOME/key.pem \
                "sshacs@1fe.rsync.upload.akamai.com" \
                "mkdir -p $env_name" || echo "    Note: mkdir may have failed, but rsync will continue."
              
              # Sync the specific subdirectory
              rsync -avv --delete \
                -e "ssh -o StrictHostKeyChecking=no -i $HOME/key.pem" \
                "$local_path/" \
                "sshacs@1fe.rsync.upload.akamai.com:$remote_path/" \
              || echo "    WARNING: rsync for '$local_path' finished with a non-zero exit code ($?). Please check rsync logs above."
            done
          done
          echo "Selective folder sync attempts complete. Review logs for any rsync warnings or errors."

      - name: Purge Akamai Cache by Cache Tag
        run: |
          set -e
          echo "Purging Akamai cache for tag '1fe'..."
          akamai purge invalidate --tag 1fe

      - name: Securely Remove SSH Key
        if: always() # Ensures this step runs even if previous steps fail
        run: |
          echo "Removing SSH private key from runner..."
          if [ -f "$HOME/key.pem" ]; then
            shred -u $HOME/key.pem || rm -f $HOME/key.pem # Try shred, fall back to rm for robustness
            echo "SSH key removed."
          else
            echo "SSH key file not found, no removal needed."
          fi

  # This job provides a dry-run preview for Pull Requests
  pr-sync-dry-run:
    if: github.event_name == 'pull_request'
    name: PR Sync Dry Run Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install rsync and Prepare SSH Key for Dry Run
        run: |
          set -e
          echo "Installing rsync..."
          sudo apt-get update -q
          sudo apt-get install -y -q rsync
          rsync --version

          echo "Setting up SSH key for rsync dry-run..."
          echo "${{ secrets.AKAMAI_NS_SSH_PRIVATE_KEY }}" > $HOME/key.pem
          chmod 600 $HOME/key.pem
          echo "SSH key for rsync dry-run is ready."

      - name: View Planned Changes with Rsync Dry Run
        env:
          # IMPORTANT: Define which environments to process (must match the main sync job)
          ENVIRONMENTS_TO_SYNC: 'integration production'
        run: |
          echo "Performing rsync dry run for selective folder sync"
          echo "This will list files that WOULD be synced/deleted if this PR were merged."
          echo "No actual changes will be made to the remote server."
          echo "Current working directory: $(pwd)"
          echo "Directory listing:"
          ls -la

          for env_name in $ENVIRONMENTS_TO_SYNC; do
            echo 
            echo "-----------------------------------------------------"
            echo "  Dry Run for environment: $env_name"
            echo "-----------------------------------------------------"
            
            if [ ! -d "$env_name" ]; then
              echo "    WARNING: Environment directory '$env_name' not found. Skipping."
              continue 
            fi
            
            echo "    Contents of '$env_name/':"
            ls -la "$env_name/"
            
            # Automatically discover all subdirectories in this environment
            subdirs=$(find "$env_name" -maxdepth 1 -type d -not -path "$env_name" -printf '%f\n' 2>/dev/null | sort)
            
            if [ -z "$subdirs" ]; then
              echo "    No subdirectories found in '$env_name/'. Skipping."
              continue
            fi
            
            echo "    Found subdirectories in '$env_name/': $(echo $subdirs | tr '\n' ' ')"
            
            # Process each discovered subdirectory
            for subdir in $subdirs; do
              local_path="$env_name/$subdir"
              remote_path="$env_name/$subdir"
              
              echo "    Checking '$local_path/'..."
              if [ ! -d "$local_path" ]; then
                echo "      ERROR: Local directory '$local_path' does not exist!"
                continue
              fi
              
              echo "      Contents of '$local_path/':"
              ls -la "$local_path/"
              
              file_count=$(find "$local_path" -type f | wc -l)
              echo "      Found $file_count files in '$local_path/'"
              
              if [ "$file_count" -eq 0 ]; then
                echo "      WARNING: No files found in '$local_path/'. Skipping dry-run."
                continue
              fi
              
              echo "    Dry run for '$local_path/' -> '$remote_path/'..."
              
              rsync -avvc --dry-run --delete \
                -e "ssh -o StrictHostKeyChecking=no -i $HOME/key.pem" \
                "$local_path/" \
                "sshacs@1fe.rsync.upload.akamai.com:$remote_path/" \
              || echo "      NOTE: rsync dry run for '$local_path' finished with a non-zero exit code ($?). Review output above for details."
            done
          done
          echo ""
          echo "-----------------------------------------------------"
          echo "Selective folder rsync dry run complete. Review output above for planned changes."

      - name: Securely Remove SSH Key
        if: always() # Ensures this step runs even if previous steps fail
        run: |
          echo "Removing SSH private key from runner..."
          if [ -f "$HOME/key.pem" ]; then
            shred -u $HOME/key.pem || rm -f $HOME/key.pem # Try shred, fall back to rm for robustness
            echo "SSH key removed."
          else
            echo "SSH key file not found, no removal needed."
          fi
